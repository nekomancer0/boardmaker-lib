class EventEmitter {
  on(t, e) {
    return (
      (this._events = this._events || {}),
      (this._events[t] = this._events[t] || []),
      this._events[t].push(e),
      this
    );
  }
  removeListener(t, e) {
    if (((this._events = this._events || {}), t in this._events != !1))
      return this._events[t].splice(this._events[t].indexOf(e), 1), this;
  }
  emit(t, ...e) {
    if (((this._events = this._events || {}), t in this._events == !1))
      return !1;
    for (var s = 0; s < this._events[t].length; s++)
      this._events[t][s].apply(this, Array.prototype.slice.call(arguments, 1));
    return !0;
  }
}
class BoardMaker extends EventEmitter {
  constructor(t) {
    super(),
      (this.metadatas = []),
      (this.items = []),
      (this.width = t.width),
      (this.height = t.height),
      (this.context = t.context),
      (this.boxNames = t.boxNames),
      (this.options = t);
  }
  addData(t) {
    this.metadatas.push(t);
  }
  removeData(t) {
    this.metadatas = this.metadatas.filter((e) => e.position !== t);
  }
  getData(t) {
    for (let e of this.metadatas)
      if (e.position.x === t.x && e.position.y === t.y) return e;
    return null;
  }
  init(t) {
    void 0 === t && (t = this.context), (t.innerHTML = "");
    let e = [],
      s = [];
    for (let i = 1; i <= this.width; i++) {
      let n = document.createElement("div");
      n.classList.add("col"),
        n.classList.add(`col-${i}`),
        e.push({ el: n, n: i });
    }
    for (let a of e) {
      for (let h = 1; h <= this.height; h++) {
        let o = document.createElement("div");
        o.classList.add("item"),
          o.classList.add(`item-${h}`),
          a.el.appendChild(o),
          s.push({ position: { x: a.n, y: h }, el: o });
      }
      t.appendChild(a.el);
    }
    this.metadatas.forEach((t) => {
      s.forEach((e) => {
        e.position.x === t.position.x &&
          e.position.y === t.position.y &&
          e.el.classList.add(t.name),
          e.el.addEventListener("click", (t) => {
            this.emit("click", this.getData(e.position), e.el);
          });
      });
    }),
      (this.items = s);
  }
}
